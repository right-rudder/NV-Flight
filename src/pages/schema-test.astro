---
import BaseLayout from "../layouts/BaseLayout.astro";
import {
  generateOrganizationSchema,
  generateServiceSchema,
  generateCourseSchema,
  generateWebsiteSchema,
  DEFAULT_SCHEMA_CONFIG,
  SchemaValidator,
  SEOEnhancer,
} from "../utils/schema-strategy";

const config = DEFAULT_SCHEMA_CONFIG;

// Generate all schemas for testing
const organizationSchema = generateOrganizationSchema(config);
const serviceSchemas = generateServiceSchema(config);
const courseSchemas = generateCourseSchema(config);
const websiteSchema = generateWebsiteSchema(config);

// Validate schemas
const orgValid = SchemaValidator.validateOrganization(organizationSchema);
const serviceValidations = serviceSchemas.map((schema) => ({
  schema,
  valid: SchemaValidator.validateService(schema),
}));
const courseValidations = courseSchemas.map((schema) => ({
  schema,
  valid: SchemaValidator.validateCourse(schema),
}));

// SEO analysis
const allSchemas = [organizationSchema, ...serviceSchemas, ...courseSchemas];
const keywords = SEOEnhancer.extractKeywords(allSchemas);
const metaDescription = SEOEnhancer.generateMetaDescription(organizationSchema);
const completenessScore =
  SEOEnhancer.calculateCompletenessScore(organizationSchema);

console.log("üìä Schema Strategy Test Results:");
console.log(`‚úÖ Organization Schema Valid: ${orgValid}`);
console.log(
  `‚úÖ Service Schemas Valid: ${serviceValidations.every((v) => v.valid)}`
);
console.log(
  `‚úÖ Course Schemas Valid: ${courseValidations.every((v) => v.valid)}`
);
console.log(`üìà Schema Completeness Score: ${completenessScore}%`);
console.log(`üîç Keywords Generated: ${keywords.slice(0, 15).join(", ")}`);
console.log(`üìù Meta Description: ${metaDescription.substring(0, 100)}...`);
---

<BaseLayout
  siteTitle="Schema Strategy Test | NV Flight"
  siteDescription="Testing and validation page for structured data implementation"
  pageType="homepage"
  includeOrganizationSchema={true}
  includeServiceSchema={true}
  includeCourseSchema={true}
  showBreadcrumbs={false}
>
  <div class="min-h-screen bg-gray-50 py-12">
    <div class="max-w-7xl mx-auto px-6">
      <div class="bg-white rounded-lg shadow-lg p-8">
        <h1 class="text-3xl font-bold text-gray-900 mb-8">
          Schema Strategy Test Page
        </h1>
        <p class="text-lg text-gray-600 mb-8">
          This page tests the comprehensive structured data implementation for
          NV Flight. Check the browser console and page source for detailed
          schema information.
        </p>

        <!-- Validation Results -->
        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 mb-12">
          <div class="bg-green-50 border border-green-200 rounded-lg p-6">
            <h3 class="text-lg font-semibold text-green-800 mb-2">
              Organization Schema
            </h3>
            <p class="text-green-600">
              Status: {orgValid ? "‚úÖ Valid" : "‚ùå Invalid"}
            </p>
            <p class="text-sm text-green-700 mt-2">
              Completeness: {completenessScore}%
            </p>
          </div>

          <div class="bg-blue-50 border border-blue-200 rounded-lg p-6">
            <h3 class="text-lg font-semibold text-blue-800 mb-2">
              Service Schemas
            </h3>
            <p class="text-blue-600">
              Generated: {serviceSchemas.length} services
            </p>
            <p class="text-sm text-blue-700 mt-2">
              All Valid: {
                serviceValidations.every((v) => v.valid) ? "‚úÖ Yes" : "‚ùå No"
              }
            </p>
          </div>

          <div class="bg-purple-50 border border-purple-200 rounded-lg p-6">
            <h3 class="text-lg font-semibold text-purple-800 mb-2">
              Course Schemas
            </h3>
            <p class="text-purple-600">
              Generated: {courseSchemas.length} courses
            </p>
            <p class="text-sm text-purple-700 mt-2">
              All Valid: {
                courseValidations.every((v) => v.valid) ? "‚úÖ Yes" : "‚ùå No"
              }
            </p>
          </div>
        </div>

        <!-- SEO Analysis -->
        <div class="bg-gray-50 rounded-lg p-6 mb-8">
          <h2 class="text-2xl font-bold text-gray-900 mb-4">SEO Analysis</h2>
          <div class="grid grid-cols-1 lg:grid-cols-2 gap-6">
            <div>
              <h3 class="text-lg font-semibold text-gray-800 mb-3">
                Keywords Extracted
              </h3>
              <div class="flex flex-wrap gap-2">
                {
                  keywords
                    .slice(0, 20)
                    .map((keyword) => (
                      <span class="bg-blue-100 text-blue-800 px-3 py-1 rounded-full text-sm">
                        {keyword}
                      </span>
                    ))
                }
              </div>
            </div>

            <div>
              <h3 class="text-lg font-semibold text-gray-800 mb-3">
                Meta Description
              </h3>
              <p class="text-gray-600 text-sm bg-white p-4 rounded border">
                {metaDescription}
              </p>
            </div>
          </div>
        </div>

        <!-- Schema Preview -->
        <div class="bg-gray-50 rounded-lg p-6">
          <h2 class="text-2xl font-bold text-gray-900 mb-4">Schema Preview</h2>

          <details class="mb-4">
            <summary
              class="text-lg font-semibold text-gray-800 cursor-pointer hover:text-blue-600"
            >
              Organization Schema ({Object.keys(organizationSchema).length} properties)
            </summary>
            <pre
              class="bg-white p-4 rounded border mt-2 overflow-x-auto text-xs">
{JSON.stringify(organizationSchema, null, 2)}
            </pre>
          </details>

          <details class="mb-4">
            <summary
              class="text-lg font-semibold text-gray-800 cursor-pointer hover:text-blue-600"
            >
              Service Schemas ({serviceSchemas.length} items)
            </summary>
            <div class="mt-2 space-y-2">
              {
                serviceSchemas.map((schema, index) => (
                  <details class="ml-4">
                    <summary class="text-md font-medium text-gray-700 cursor-pointer">
                      {schema.name}
                    </summary>
                    <pre class="bg-white p-3 rounded border mt-1 overflow-x-auto text-xs">
                      {JSON.stringify(schema, null, 2)}
                    </pre>
                  </details>
                ))
              }
            </div>
          </details>

          <details class="mb-4">
            <summary
              class="text-lg font-semibold text-gray-800 cursor-pointer hover:text-blue-600"
            >
              Course Schemas ({courseSchemas.length} items)
            </summary>
            <div class="mt-2 space-y-2">
              {
                courseSchemas.map((schema, index) => (
                  <details class="ml-4">
                    <summary class="text-md font-medium text-gray-700 cursor-pointer">
                      {schema.name}
                    </summary>
                    <pre class="bg-white p-3 rounded border mt-1 overflow-x-auto text-xs">
                      {JSON.stringify(schema, null, 2)}
                    </pre>
                  </details>
                ))
              }
            </div>
          </details>
        </div>

        <!-- Testing Tools -->
        <div class="bg-yellow-50 border border-yellow-200 rounded-lg p-6 mt-8">
          <h2 class="text-2xl font-bold text-yellow-800 mb-4">Testing Tools</h2>
          <p class="text-yellow-700 mb-4">
            Use these tools to validate the structured data implementation:
          </p>
          <div class="space-y-2">
            <a
              href="https://search.google.com/test/rich-results"
              target="_blank"
              class="inline-block bg-blue-600 text-white px-4 py-2 rounded hover:bg-blue-700 mr-2"
            >
              Google Rich Results Test
            </a>
            <a
              href="https://validator.schema.org/"
              target="_blank"
              class="inline-block bg-green-600 text-white px-4 py-2 rounded hover:bg-green-700 mr-2"
            >
              Schema.org Validator
            </a>
            <button
              onclick="console.log('All schemas:', window.schemaTestData || 'Check page source')"
              class="inline-block bg-purple-600 text-white px-4 py-2 rounded hover:bg-purple-700"
            >
              Log Schemas to Console
            </button>
          </div>
        </div>
      </div>
    </div>
  </div>

  <script is:inline>
    // Make schemas available for testing
    window.schemaTestData = "Check page source for schemas";
    console.log(
      "üß™ Schema test data available - check page source for JSON-LD scripts"
    );
  </script>
</BaseLayout>
