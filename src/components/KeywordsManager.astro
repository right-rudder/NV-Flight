---
import {
  generatePageKeywords,
  generateSEOTitle,
  generateSEODescription,
  KeywordValidator,
  PAGE_KEYWORD_TEMPLATES,
} from "../utils/keywords-strategy";
import {
  TitleStrategy,
  DescriptionStrategy,
  TitleDescriptionAnalyzer,
} from "../utils/title-description-strategies";

interface Props {
  pageType?: keyof typeof PAGE_KEYWORD_TEMPLATES;
  baseTitle?: string;
  baseDescription?: string;
  customKeywords?: string[];
  location?: string;
  maxDescriptionLength?: number;
  enableAdvancedStrategies?: boolean;
}

const {
  pageType = "homepage",
  baseTitle,
  baseDescription,
  customKeywords = [],
  location = "Reno, NV",
  maxDescriptionLength = 160,
  enableAdvancedStrategies = true,
} = Astro.props;

// Generate optimized keywords for this page
const pageKeywords = generatePageKeywords(pageType, customKeywords);

// Generate SEO-optimized title and description using advanced strategies
const optimizedTitle = enableAdvancedStrategies
  ? TitleStrategy.generateTitle(pageType, {
      customTitle: baseTitle,
      keywords: pageKeywords.title,
      location,
      brand: "NV Flight",
      prioritizeKeywords: true,
    })
  : baseTitle
    ? generateSEOTitle(baseTitle, pageKeywords.title, location)
    : pageKeywords.title.join(", ");

const optimizedDescription = enableAdvancedStrategies
  ? DescriptionStrategy.generateDescription(pageType, {
      customDescription: baseDescription,
      keywords: pageKeywords.meta,
      location,
      brand: "NV Flight",
      maxLength: maxDescriptionLength,
    })
  : baseDescription
    ? generateSEODescription(
        baseDescription,
        pageKeywords.meta,
        maxDescriptionLength
      )
    : `${pageKeywords.meta.slice(0, 3).join(", ")} in ${location}. ${pageKeywords.content[0] || "Professional flight training services."} Contact us today!`;

// Analyze title and description quality
const titleAnalysis = TitleDescriptionAnalyzer.analyzeTitle(
  optimizedTitle,
  pageKeywords.title
);
const descriptionAnalysis = TitleDescriptionAnalyzer.analyzeDescription(
  optimizedDescription,
  pageKeywords.meta
);

// Generate A/B testing variations if in development
const variations = import.meta.env.DEV
  ? TitleDescriptionAnalyzer.generateVariations(pageType, pageKeywords.title, 3)
  : { titles: [], descriptions: [] };

// Validate keyword implementation
const validation = KeywordValidator.validatePageKeywords(pageKeywords);

// Development logging
if (import.meta.env.DEV) {
  KeywordValidator.logValidation(pageType, pageKeywords, validation.valid);

  if (!validation.valid) {
    console.warn(`⚠️ Keyword issues for ${pageType}:`, validation.issues);
  }

  console.log(`🎯 Keywords for ${pageType}:`, {
    title: pageKeywords.title,
    meta: pageKeywords.meta.slice(0, 5),
    primary: pageKeywords.content.slice(0, 3),
  });

  console.log(`📝 SEO Optimized:`, {
    title: optimizedTitle,
    description: optimizedDescription.substring(0, 100) + "...",
  });

  // Title and Description Analysis Logging
  console.log(`📊 Title Analysis (Score: ${titleAnalysis.score}/100):`, {
    issues: titleAnalysis.issues,
    recommendations: titleAnalysis.recommendations,
    strengths: titleAnalysis.strengths,
  });

  console.log(
    `📊 Description Analysis (Score: ${descriptionAnalysis.score}/100):`,
    {
      issues: descriptionAnalysis.issues,
      recommendations: descriptionAnalysis.recommendations,
      strengths: descriptionAnalysis.strengths,
    }
  );

  if (variations.titles.length > 0) {
    console.log(`🔄 A/B Testing Variations:`, {
      titleVariations: variations.titles,
      descriptionVariations: variations.descriptions,
    });
  }
}

// Generate keywords meta content
const metaKeywords = [
  ...new Set([...pageKeywords.title, ...pageKeywords.meta, ...customKeywords]),
]
  .slice(0, 15)
  .join(", ");

// Make data available to parent components
const keywordData = {
  title: optimizedTitle,
  description: optimizedDescription,
  keywords: metaKeywords,
  pageKeywords,
  validation,
  titleAnalysis,
  descriptionAnalysis,
  variations: import.meta.env.DEV ? variations : undefined,
};

// Export to global for parent access
if (typeof global !== "undefined") {
  (global as any).keywordData = keywordData;
}
---

<!-- Keywords are integrated into meta tags by parent components --><!-- This component provides the optimization logic and validation -->
<script is:inline define:vars={{ keywordData }}>
  // Make keyword data available for development debugging
  if (window.location.hostname === "localhost") {
    window.keywordData = keywordData;
    console.log("🔑 Keyword data available in window.keywordData");
  }
</script>

<style>
  /* Hidden component - provides data only */
  :host {
    display: none;
  }
</style>
